#pragma checksum "C:\Users\EQ-214.EQ-214\source\repos\Bingo\Bingo\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fef8d1421c84faab4bf74f154255fc95bddd7393"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\EQ-214.EQ-214\source\repos\Bingo\Bingo\Views\_ViewImports.cshtml"
using Bingo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\EQ-214.EQ-214\source\repos\Bingo\Bingo\Views\_ViewImports.cshtml"
using Bingo.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fef8d1421c84faab4bf74f154255fc95bddd7393", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f7ed06378610ee32ea5761b1e5bc3ba1dcc44e13", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\EQ-214.EQ-214\source\repos\Bingo\Bingo\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Inicio";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    canvas {
        border: 2px solid black;
        border-radius: 10px;
        background-color: rgba(128, 128, 128,0.6);
    }
</style>
<div class=""text-center"">
    <h1 class=""display-4"">Bingo</h1>
    <div> Hay <span id=""cant""></span> Usuarios Conectados</div>
</div>
<div class=""row"">
    <div class=""col-7"">
        <button onclick=""GetBalotas()"" class=""btn btn-primary"">Activar Audio</button>
        <button onclick=""Reset()"" class=""btn btn-danger"">Resetear</button>
    </div>
    <div class=""col-5"" id=""menu"">
        <button onclick=""Pause()"" class=""btn btn-secondary"">Reanudar / Pausar</button>
    </div>
</div>
   
    

<div class=""row"">
    <div class=""col-12"">

        <table class=""table-responsive"">
            <tr>
                <td>
                    <canvas id=""canvas""></canvas>
                </td>
            </tr>
        </table>
    </div>
</div>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fef8d1421c84faab4bf74f154255fc95bddd73934601", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script>
   



            //--------------Script para Generar SCADA RFID - CDT de GAS---------------------------------

            //Clase de propiedades del esquema SCADA
            class System {
                canvas = null;
                width = 1100;    //Ancho del Esquema en PX
                height = this.width/2;   //Relacion de altura
                sizetag = this.width / 23;  //Relacion de tamaño de elementos
                sizetextbaloon = this.width / 5;  //Relacion de tamaño de elementos
                director = null;            //Elemento para estado refresh
                actual = null;
                numero = null;
                estado = 0;

                //Posiciones de los elementos de forma escalable segun el tamaño del Canvas
                canvas_xy = [{ position: 0, x: this.width / 9.14, y: this.width / 3.2, isHovering: false },
                    { position: 1, x: this.width / 4.1, y: this.width / 3.2, isHovering: false},
                   ");
            WriteLiteral(@" { position: 2, x: this.width / 3.08, y: this.width / 3.2, isHovering: false},
                    { position: 3, x: this.width / 2.34, y: this.width / 3.97, isHovering: false},
                    { position: 4, x: this.width / 1.8, y: this.width / 3.8, isHovering: false },
                    { position: 5, x: this.width / 1.6, y: this.width / 3.8, isHovering: false },
                    { position: 6, x: this.width / 1.4, y: this.width / 3.8, isHovering: false }];

                background = new Image();                           //Fondo
                tag = [];                                           //Array de Tags
                status = [""#FFFFFF"", ""#FB3207 "", ""#077FFB"", ""#80FF7E""];   //Aray de Imagenes de Estado
                leter = [""B"", ""I"", ""N"", ""G"", ""O"",""O""];
                textbaloon = new Image();
                availableNumbers = [];

                constructor(canvas) {
                    //Carga de Canvas , dimensiones e Imágenes
                    this.canvas = ");
            WriteLiteral(@"document.getElementById(""canvas"");
                    this.ctx = canvas.getContext(""2d"");
                    this.canvas.width = this.width;
                    this.canvas.height = this.height;
                    
                }
                DrawCircle(color, x, y, number,size=25) {
                    this.ctx.beginPath();
                    this.ctx.arc(x, y, size, 0, (Math.PI / 180) * 360, true);
                    this.ctx.fillStyle = this.status[color];
                    this.ctx.fill();
                    this.ctx.closePath();

                    this.ctx.beginPath();
                    this.ctx.fillStyle = ""black"";
                    if (number != null) {
                        if (size == 25) {
                            this.ctx.font = ""bold 15pt Verdana center"";
                            this.ctx.fillText(number, x - 10, y + 8);
                        }
                        else {
                            this.ctx.font = ""bold 40pt Verdana center"";  ");
            WriteLiteral(@"                          
                            this.ctx.fillText(number, x - 45, y + 15);
                        }
                        
                        
                        this.ctx.closePath();
                    }
                    
                }

                //Método que grafica los elementos en el Canvas
                Show() {
                    //Primero se limpia el canvas
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    //Carga de Fondo

                    this.ctx.drawImage(this.background, 0, 0, this.width, this.height);
                    this.ctx.stroke;

                    //Cargar letras
                    this.DrawCircle(2, 100, 60, ""B"");
                    this.DrawCircle(2, 100, 120, ""I"");
                    this.DrawCircle(2, 100, 180, ""N"");
                    this.DrawCircle(2, 100, 240, ""G"");
                    this.DrawCircle(2, 100, 300, ""O"");

                 ");
            WriteLiteral(@"   //Se cargan todos los elementos como inactivos
                    for (var item of this.tag) {
                        var delta = 60;
                        var x = delta * ((item.number-1) % 15)+180;
                        var y = delta*Math.ceil(item.number / 15);

                        OSystem.DrawCircle(item.status, x, y, item.number);
                        
                    }

                    //Numero actual
                    this.DrawCircle(3, 600, 450, this.actual, 80);

                    //Estado


                }
               

                Reset() {
                    OSystem.tag = [];
                    OSystem.availableNumbers = [];
                    for (var i = 1; i <= 75; i++) {
                        OSystem.tag.push({ number: i, status: 0 });
                        OSystem.availableNumbers.push(i);
                    }
                    this.Show();
                }
                GenerateNumber() {
                    var m");
            WriteLiteral(@"ax = this.availableNumbers.length;
                    var min = 0;
                    var aleatorio = Math.floor(Math.random() * (max - min) + min);
                    aleatorio = this.availableNumbers[aleatorio];
                    this.numero = aleatorio;
                    var res = Math.floor(aleatorio / 15);
                    this.actual = this.leter[res] + aleatorio;
                }
                Modify() {
                    this.tag.find(x => x.number == this.numero).status = 1;
                    var f = this.availableNumbers.indexOf(this.numero);
                    this.availableNumbers.splice(f, 1);

                }
                Spech() {

                    let textoAEscuchar = this.actual;
                    let mensaje = new SpeechSynthesisUtterance();
                    mensaje.volume = 3;
                    mensaje.rate = 0.5;
                    mensaje.text = textoAEscuchar;
                    mensaje.pitch = 1;
                    // ¡Parla!
  ");
            WriteLiteral(@"                  speechSynthesis.speak(mensaje)
                }


                //Método al iniciar el sistema
                Init() {
                    this.Reset();
                    this.Show();    //Se grafican
                }
                RefreshOnline(data) {
                    var aleatorio = data;
                    this.numero = aleatorio;
                    var res = Math.floor(aleatorio / 15);
                    this.actual = this.leter[res] + aleatorio;

                    this.Modify();
                    this.Show();
                    this.Spech();
                }
                Continue() {
                    this.director = setInterval(() => {
                        this.GenerateNumber();
                        connection.invoke(""SendNumber"", OSystem.numero);
                        this.Modify();
                        this.Show();
                        this.Spech();
                    }, 8000)
                }
                Paus");
            WriteLiteral(@"e() {
                    if (this.estado == 0) {
                        clearInterval(OSystem.director);
                        this.ctx.beginPath();
                        this.ctx.fillStyle = ""black"";
                        this.ctx.font = ""bold 55pt Verdana center"";
                        this.ctx.fillText(""Pausado"", 100, 450);
                        this.ctx.closePath();
                    }
                    else {
                        this.Continue();
                    }
                }

            }
            var OSystem = new System(canvas);   //Al cargar la página se crea el objeto del SCADA

            //Iniciar al cargar toda la página
            window.onload = function () {
                $(""#menu"").toggle();
                OSystem.Init();    //Inicializar el SCADA cuando se hallan cargado todos los elementos necesarios
            }


    
    //Conexion Signal R
    var connection = new signalR.HubConnectionBuilder().withUrl(""/bingohub"").build()");
            WriteLiteral(@";

    //Agregar al grupo para estar notificado de cambios en este sistema
    connection.start().then(function () {
        console.log(""Conectado"");
    });

       //Recibe aviso si hubo un cambio en este sistema y actualiza datos
    connection.on(""ReceiveNumber"", function (data) {
        OSystem.RefreshOnline(data);
    });

    connection.on(""Recibir"", (data) => {
        alert(data);
    });
    function GetBalotas() {
        OSystem.Spech();
    }
    function Reset() {
        OSystem.Reset();
    }
    function Pause() {
        if (OSystem.estado == 0) OSystem.estado = 1;
        else OSystem.estado = 0;
        OSystem.Pause();
    }

    connection.on(""MostrarConectados"", (data) => {
        $(""#cant"").html(data);
    });
</script>    ");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
